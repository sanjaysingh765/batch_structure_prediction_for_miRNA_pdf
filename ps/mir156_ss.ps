%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.5
%%CreationDate: Thu Jun  9 09:57:25 2016
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGGUGACAGAAGAGAGUGAGCACACAUGGUGGUUUUCUUGCAUAAUAUGAUUCCCCAUGCUUGAAGCUAUGCGUGCUCACUCUCUAUCUGUCACCC\
) def
/coor [
[92.92440033 443.18273926]
[98.97074127 427.34359741]
[98.97074127 412.34359741]
[98.97074127 397.34359741]
[98.97074127 382.34359741]
[98.97074127 367.34359741]
[98.97074127 352.34359741]
[98.97074127 337.34359741]
[98.97074127 322.34359741]
[98.97074127 307.34359741]
[98.72784424 292.34558105]
[98.24211884 277.35342407]
[97.75638580 262.36129761]
[97.27066040 247.36917114]
[96.78493500 232.37702942]
[96.29920197 217.38490295]
[95.81347656 202.39276123]
[95.32775116 187.40063477]
[94.84201813 172.40849304]
[94.35629272 157.41636658]
[93.87055969 142.42422485]
[93.38483429 127.43209839]
[92.89910889 112.43996429]
[85.68356323 100.46383667]
[92.10876465 88.04576111]
[91.62303162 73.05363464]
[91.13730621 58.06149673]
[90.65157318 43.06936264]
[90.16584778 28.07723045]
[89.68012238 13.08509731]
[86.97528076 9.13036156]
[85.91148376 4.93763638]
[86.34326172 1.09436333]
[87.93631744 -1.93184912]
[90.22872925 -3.84791255]
[91.68387604 -18.77716446]
[93.13902283 -33.70641708]
[83.37587738 -45.84391022]
[85.06427765 -60.96356201]
[96.69569397 -70.19643402]
[98.15084076 -85.12567902]
[99.60598755 -100.05493164]
[101.06113434 -114.98418427]
[87.79457092 -122.46202850]
[78.72167969 -134.69323730]
[75.41440582 -149.55870056]
[78.44575500 -164.48286438]
[87.29051208 -176.88005066]
[100.41629028 -184.60235596]
[115.54895020 -186.31184387]
[130.06668091 -181.71234131]
[141.45419312 -171.60073853]
[147.73852539 -157.72892761]
[147.83088684 -142.50028992]
[141.71528625 -128.55328369]
[130.45126343 -118.30429840]
[115.99038696 -113.52903748]
[114.53524017 -98.59978485]
[113.08009338 -83.67053223]
[111.62494659 -68.74127960]
[121.25452423 -57.43611526]
[119.99147034 -42.27500153]
[108.06827545 -32.25126648]
[106.61312866 -17.32201576]
[105.15798187 -2.39276481]
[104.67224884 12.59936905]
[105.15798187 27.59150314]
[105.64370728 42.58363724]
[106.12944031 57.57576752]
[106.61516571 72.56790161]
[107.10089111 87.56003571]
[114.31643677 99.53616333]
[107.89123535 111.95423889]
[108.37696838 126.94636536]
[108.86269379 141.93850708]
[109.34842682 156.93063354]
[109.83415222 171.92277527]
[110.31987762 186.91490173]
[110.80561066 201.90704346]
[111.29133606 216.89916992]
[111.77706909 231.89129639]
[112.26279449 246.88343811]
[112.74851990 261.87557983]
[113.23425293 276.86770630]
[113.71997833 291.85983276]
[117.17981720 300.52536011]
[113.97074127 307.34359741]
[113.97074127 322.34359741]
[113.97074127 337.34359741]
[113.97074127 352.34359741]
[113.97074127 367.34359741]
[113.97074127 382.34359741]
[113.97074127 397.34359741]
[113.97074127 412.34359741]
[113.97074127 427.34359741]
[120.01708221 443.18273926]
] def
/pairs [
[2 95]
[3 94]
[4 93]
[5 92]
[6 91]
[7 90]
[8 89]
[9 88]
[10 87]
[11 85]
[12 84]
[13 83]
[14 82]
[15 81]
[16 80]
[17 79]
[18 78]
[19 77]
[20 76]
[21 75]
[22 74]
[23 73]
[25 71]
[26 70]
[27 69]
[28 68]
[29 67]
[30 66]
[35 65]
[36 64]
[37 63]
[40 60]
[41 59]
[42 58]
[43 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
